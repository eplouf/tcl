#!/bin/sh
# a nerd tool for the geek world \
exec tclsh "$0" "$@"

# -rwxr-xr-x 1 eak users 2123 Oct  3 16:06 colorcat Kilian eldre8 2009

# this wants to be a coloured cat,
# through support of vim syntax rules! Nooooo
# stdout has different meanings than true file,
# likely, we could have to print half block !
# just 6 or 8 different colors should be sufficient
#  - yellow/33 {} [] ()
#  - grey/30 ^[\t ]+[^\t \(\{\[]+
#    ^ seulement dans le cas ou c'est un code ! :/
#  - blue/34 ^[#\"/].*
#  - sousligne/4 [a-z]{3,6}://[^\t\r\n ]+
#  - rouge/31 (=|->|.)
#  - cyan/34 
#  - rose/35
#  - green/32

#for {set i 0} {$i < 65} {incr i} {
#	puts -nonewline "\033\[01;${i}mtoto $i\033\[00m\t"
#}

proc doit { file {verbose ""}} {
	while { ![eof $file] } {
		while { [gets $file line] > -1 } {
			if [regsub -lineanchor -all -- {^([\t ]*[#/].*)} $line "\033\[1;34m&\033\[0m" match] {
				puts "$match"
				continue
			}
			if [regsub -lineanchor -all -- {([\{\}\[\]\\(\)])} $line "\033\[1;33m&\033\[0m" match] {
				set line "$match"
			}
			if [regsub -lineanchor -all -- {([\042$*%|&=])} $line "\033\[1;31m&\033\[0m" match] {
				set line "$match"
			}
			#puts "-- $line"
			if [regsub -lineanchor -all -- {([a-z]{3,6}://[^\t\r\n ]+)} $line "\033\[1;34m&\033\[0m" match] {
				#puts "entered uri scheme"
				puts "$match"
				continue
			}
			#set line [regsub -lineanchor -all -- {^((=|->|.))} $line "\033\[1;31m&\033\[0m"]
			puts "$line"
		}
	}
	
}

variable file stdin
variable verbose non

fconfigure stdout -buffering none

if { "[lindex $argv 0]" == "-v" } {
	set argv [lrange $argv 1 end]
	incr argc -1
	set verbose "oui"
}
if { "$argv" != "" } {
	while { $argc > 1 } {
		if { "$verbose" == "oui" } {
			puts "-- [lindex $argv 0]"
		}
		set file [open [lindex $argv 0] r]
		fconfigure $file -buffering none
		doit $file
		close $file
		set argv [lrange $argv 1 end]
		incr argc -1
	}
	set file [open $argv r]
	fconfigure $file -buffering none
}
if { "$verbose" == "oui" } {
	puts "-- $argv"
}
doit $file
close $file

